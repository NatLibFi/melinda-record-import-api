{
    "openapi": "3.0.0",
    "tags": [
        {
            "name": "auth",
            "description": "Get authentication token"
        },
        {
            "name": "blobs",
            "description": "Operate on blobs"
        },
        {
            "name": "profiles",
            "description": "Operate on profiles"
        }
    ],
    "security": [
        {
            "httpBasic": [],
            "httpBearer": []
        }
    ],
    "paths": {
        "/auth": {
            "post": {
                "summary": "Get a bearer token for authentication",
                "security": ["httpBasic"],
                "tags": [
                    "auth"
                ],                
                "responses": {
                    "204": {
                        "description": "Authentication succeeded",
                        "headers": {
                            "Token": {
                                "description": "Bearer token used in authenticating with other resources",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed"
                    }
                }
            }
        },
        "/blobs": {
            "post": {
                "summary": "Create a new blob",
                "security": ["httpBearer"],
                "tags": [
                    "blobs"
                ],
                "parameters": [
                    {
                        "name": "Import-Profile",
                        "in": "header",
                        "description": "Name of the import profile to use",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "description": "Media type of the blob",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The blob was succesfully created. State is set to PENDING_TRANSFORMATION",
                        "headers": {
                            "Location": {
                                "description": "URL pointing to the the created resource",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The profile does not exist or the user is not authorized to it"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "413": {
                        "description": "Request body is too large"
                    }
                }
            },
            "get": {
                "summary": "Query for blobs",
                "security": ["httpBearer"],
                "tags": [
                    "blobs"
                ],
                "parameters": [
                    {
                        "name": "QueryOffset",
                        "in": "header",
                        "description": "Offset of the result set to return",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    },                    
                    {
                        "name": "profile",
                        "in": "query",
                        "schema": {
                            "oneOf": [
                                {"type": "string"},
                                {"type": "array", "items": {"type": "string"}}
                            ]                            
                        }
                    },
                    {
                        "name": "contentType",
                        "in": "query",
                        "schema": {
                            "oneOf": [
                                {"type": "string"},
                                {"type": "array", "items": {"type": "string"}}
                            ]                            
                        }                        
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "schema": {
                            "oneOf": [
                                {"$ref": "#/components/schemas/BlobState"},
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BlobState"
                                    }
                                }
                            ]                            
                        }
                    },
                    {
                        "name": "creationTime",
                        "description": "The query is done using a time range if the parameter is provided twice",
                        "in": "query",
                        "schema": {
                            "oneOf": [
                                {"type": "string", "format": "date-time"},
                                {
                                    "type": "array", "items": {
                                        "type": "string",
                                        "format": "date-time"
                                    }
                                }
                            ]                            
                        }   
                    },
                    {
                        "name": "modificationTime",
                        "description": "The query is done using a time range if the parameter is provided twice",
                        "in": "query",
                        "schema": {
                            "oneOf": [
                                {"type": "string", "format": "date-time"},
                                {
                                    "type": "array", "items": {
                                        "type": "string",
                                        "format": "date-time"
                                    }
                                }
                            ]                            
                        }  
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of blob metadata objects. Empty list if no resources were found",
                        "headers": {
                            "NextOffset": {
                                "description": "Offset of the next result set when the total number of results exceeds the limit",
                                "schema": {
                                    "type": "number"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BlobQueryMetadata"
                                    }                                    
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed"
                    }
                }
            }
        },
        "/blobs/{id}": {
            "get": {
                "summary": "Retrieve blob metadata",
                "security": ["httpBearer"],
                "tags": [
                    "blobs"
                ],
                "responses": {
                    "200": {
                        "description": "Return content",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlobMetadata"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "404": {
                        "description": "The blob does not exist"
                    }
                }
            },
            "post": {
                "summary": "Update blob metadata",
                "security": ["httpBearer"],
                "tags": [
                    "blobs"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlobMetadataUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The metadata was updated"
                    },
                    "400": {
                        "description": "Malformed content"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "404": {
                        "description": "The blob does not exist"
                    },
                    "422": {
                        "description": "Invalid syntax"
                    },
                    "409": {
                        "description": "Attempted to set record status when all records have already been processed"
                    }
                }
            },
            "delete": {
                "summary": "Delete a blob",
                "security": ["httpBearer"],
                "description": "The blob is completely removed including all related records in the queue",
                "tags": [
                    "blobs"
                ],
                "responses": {
                    "204": {
                        "description": "The blob was removed"
                    },
                    "400": {
                        "description": "Blob content exists and must be removed first"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "404": {
                        "description": "The blob doesn't exist not found"
                    }
                }
            }
        },
        "/blobs/{id}/content": {
            "get": {
                "summary": "Retrieve blob content",
                "security": ["httpBearer"],
                "tags": [
                    "blobs"
                ],
                "responses": {
                    "204": {
                        "description": "Return the content"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "404": {
                        "description": "Content not found"
                    }
                }
            },
            "delete": {
                "summary": "Delete blob content",
                "security": ["httpBearer"],
                "description": "The blob content is removed",
                "tags": [
                    "blobs"
                ],
                "responses": {
                    "204": {
                        "description": "The content was removed"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "404": {
                        "description": "Content not found"
                    }
                }
            }
        },
        "/profiles/{name}": {
            "put": {
                "summary": "Create or update a profile",
                "security": ["httpBearer"],
                "tags": [
                    "profiles"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Profile"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The profile was created"
                    },
                    "204": {
                        "description": "The profile was updated"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "422": {
                        "description": "Invalid syntax"
                    }
                }
            },
            "get": {
                "summary": "Retrieve a profile",
                "security": ["httpBearer"],
                "tags": [
                    "profiles"
                ],
                "responses": {
                    "200": {
                        "description": "Return the profile",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Profile"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Not authorized"
                    },
                    "404": {
                        "description": "The profile does not exist"
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "httpBasic": {
                "type": "http",
                "scheme": "basic"
            },
            "httpBearer": {
                "type": "http",
                "scheme": "bearer"
            }
        },
        "schemas": {
            "BlobState": {
                "type": "string",
                "enum": [
                    "PENDING_TRANSFORMATION",
                    "TRANSFORMATION_IN_PROGRESS",
                    "TRANSFORMATION_FAILED",
                    "TRANSFORMED",
                    "PROCESSED",
                    "ABORTED"
                ]
            },
            "RecordImportStatus": {
                "type": "string",
                "enum": [
                    "CREATED",
                    "UPDATED",
                    "INVALID",
                    "DUPLICATE",
                    "ERROR",
                    "SKIPPED"
                ]
            },
            "RecordImportResult": {
                "type": "object",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/RecordImportStatus"
                    },
                    "metadata": {
                        "type": "object"
                    }
                }
            },
            "Profile": {
                "type": "object",
                "properties": {
                    "id": {"type": "string"},
                    "auth": {
                        "type": "object",
                        "properties": {
                            "groups": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "transformation": {
                        "type": "object",
                        "properties": {
                            "image": {
                                "description": "Name of the transformer container image",
                                "type": "string"
                            },
                            "env": {
                                "description": "Environment variables for the container",
                                "type": "object",
                                "additionalProperties": false,
                                "patternProperties": {
                                  "^[A-z0-9_]+$": {
                                    "type": "string"
                                  }
                                }
                            }
                        },
                        "required": [
                            "image"
                        ]
                    },
                    "import": {
                      "type": "object",
                      "properties": {
                          "image": {
                              "description": "Name of the importer container image",
                              "type": "string"
                          },
                          "concurrency": {
                            "description": "Maximum number of importers that can be run concurrently for this profile. This controls the total number of importers not by blob. The default is determined by the system if left undefined",
                            "type": "number"
                          },
                          "env": {
                              "description": "Environment variables for the container",
                              "type": "object",
                              "additionalProperties": false,
                              "patternProperties": {
                                "^[A-z0-9_]+$": {
                                  "type": "string"
                                }
                              }
                          }
                      },
                      "required": [
                          "image"
                      ]
                    }
                },
                "required": [
                    "auth",
                    "transformation",
                    "import"
                ]
            },
            "BlobQueryMetadata": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "profile": {
                        "type": "string"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "state": {
                        "$ref": "#/components/schemas/BlobState"
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modificationTime": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "example": {
                    "id": 123456,
                    "profile": "foobar",
                    "contentType": "application/json",
                    "state": "PENDING_TRANSFORMATION",
                    "creationTime": "2018-01-01T00:00:00Z",
                    "modificationTime": "2018-01-01T00:01:00Z"
                }
            },
            "BlobMetadata": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "profile": {
                        "type": "string"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "state": {
                        "$ref": "#/components/schemas/BlobState"
                    },
                    "creationTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modificationTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "processingInfo": {
                        "type": "object",
                        "properties": {
                            "transformationError": {
                                "type": "object"
                            },
                            "numberOfRecords": {
                                "type": "number"
                            },
                            "importResults": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordImportResult"
                                }
                            }
                        }
                    }
                },
                "example": {
                    "id": 123456,
                    "profile": "foobar",
                    "contentType": "application/json",
                    "state": "PENDING_TRANSFORMATION",
                    "creationTime": "2018-01-01T00:00:00Z",
                    "modificationTime": "2018-01-01T00:01:00Z",
                    "processingInfo": {
                        "numberOfRecords": 1000,
                        "importResults": [
                            {
                                "metadata": {
                                    "id": 6000
                                },
                                "state": "CREATED"
                            }
                        ]
                    }
                }
            },
            "BlobMetadataUpdate": {
                "example": {
                    "op": "transformationResult",
                    "numberOfRecords": 1000
                },
                "anyOf": [
                    {
                        "description": "Blob processing is aborted. State is set to ABORTED and all the records related to the blob are removed from the import queue",
                        "type": "object",
                        "properties": {
                            "op": {
                                "type": "string",
                                "pattern": "^abort$"
                            }
                        }
                    },
                    {
                        "description": "Blob transformation is started. State is set to TRANSFORMATION_IN_PROGRESS",
                        "type": "object",
                        "properties": {
                            "op": {
                                "type": "string",
                                "pattern": "^transformationStarted$"
                            }
                        }
                    },
                    {
                        "description": "Blob state is set to TRANSFORMED and numberOfRecords is set to the provided value",
                        "type": "object",
                        "properties": {
                            "op": {
                                "type": "string",
                                "pattern": "^transformationDone$"
                            },
                            "numberOfRecords": {
                                "type": "number"
                            },
                            "failedRecords": {
                                "type": "array",
                                "items": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    {
                        "description": "Blob state is set to TRANSFORMATION_FAILED and transformationError is set to the provided value",
                        "type": "object",
                        "properties": {
                            "op": {
                                "type": "string",
                                "pattern": "^transformationFailed$"
                            },
                            "error": {}
                        }
                    },
                    {
                        "description": "The record result is appended to the importResults property. If the number of items in the importResults property equals numberOfRecords state if set to PROCESSED",
                        "type": "object",
                        "properties": {
                            "op": {
                                "type": "string",
                                "pattern": "^recordProcessed"
                            },
                            "status": {
                                "$ref": "#/components/schemas/RecordImportStatus"
                            },
                            "metadata": {
                                "type": "object"
                            }
                        }
                    }
                ]
            }
        }
    }
}
