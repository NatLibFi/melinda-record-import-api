{
  "openapi": "3.0.0",
  "info": {
    "title": "foo",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://record-import.api.melinda.kansalliskirjasto.fi/v1"
    }
  ],
  "tags": [
    {
      "name": "blobs",
      "description": "Operate on blobs"
    },
    {
      "name": "profiles",
      "description": "Operate on profiles"
    }
  ],
  "security": [
    {
      "httpBasic": []
    }
  ],
  "paths": {
    "/blobs": {
      "post": {
        "summary": "Create a new blob",
        "tags": ["blobs"],
        "parameters": [
          {
            "name": "Import-Profile",
            "in": "header",
            "description": "Name of the import profile to use",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "The blob was succesfully created. State is set to PENDING_TRANSFORMATION",
            "headers": {
              "Location": {
                "description": "URL pointing to the the created resource"
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "The profile does not exist or the user is not authorized to it"
          },
          "413": {
            "description": "Request body is too large"
          },
          "415": {
            "description": "Content type was not specified"
          }
        }
      },
      "get": {
        "summary": "Query for blobs",
        "tags": ["blobs"],
        "parameters": [
          {
            "name": "profile",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/BlobState"
            }
          },
          {
            "name": "creationTime",
            "description": "The query is done using a time range if the parameter if provided twice",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "modificationTime",
            "description": "The query is done using a time range if the parameter if provided twice",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of URLs pointing to blob resources. Empty list if no resources were found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "example": [
                  "https://record-import.api.melinda.kansalliskirjasto.fi/v1/blob/1234",
                  "https://record-import.api.melinda.kansalliskirjasto.fi/v1/blob/5678"
                ]
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Not authorized"
          },
          "400": {
            "description": "Invalid query"
          }
        }
      }
    },
    "/blobs/{id}": {
      "get": {
        "summary": "Retrieve blob metadata",
        "tags": ["blobs"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlobMetadata"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "The blob does not exist"
          }
        }
      },
      "post": {
        "summary": "Update blob metadata",
        "tags": ["blobs"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "op": "transformationResult",
                  "numberOfRecords": 1000
                },
                "type": "object",
                "properties": {
                  "anyOf": [
                    {
                      "description": "Blob processing is aborted. State is set to ABORTED and all records of the blob are removed from the import queue",
                      "type": "object",
                      "properties": {
                        "op": {
                          "type": "string",
                          "pattern": "^abort$"
                        }
                      }
                    },
                    {
                      "description": "Blob transformation is started. State is set to TRANSFORMATION_IN_PROGRESS",
                      "type": "object",
                      "properties": {
                        "op": {
                          "type": "string",
                          "pattern": "^transformationStarted$"
                        }
                      }
                    },
                    {
                      "description": "Blob state is set to TRANSFORMED and numberOfRecords is set to the provided value",
                      "type": "object",
                      "properties": {
                        "op": {
                          "type": "string",
                          "pattern": "^transformationResult$"
                        },
                        "numberOfRecords": {
                          "type": "number"
                        }
                      }
                    },
                    {
                      "description": "Blob state is set to TRANSFORMATION_FAILED and transformationError is set to the provided value",
                      "type": "object",
                      "properties": {
                        "op": {
                          "type": "string",
                          "pattern": "^transformationError$"
                        },
                        "error": {
                          "type": "any"
                        }
                      }
                    },
                    {
                      "description": "The record result is appended to the imported property if import status is CREATED or UPDATED. Otherwise the result is append to failed property. If the sum of results in failed and imported properties equals numberOfRecords state if set to PROCESSED",
                      "type": "object",
                      "properties": {
                        "op": {
                          "type": "string",
                          "pattern": "^recordImportResult"
                        },
                        "content": {
                          "$ref": "#/components/schemas/RecordImportResult"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Malformed content"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "The blob does not exist"
          },
          "422": {
            "description": "Invalid syntax"
          }
        }
      },
      "delete": {
        "summary": "Delete a blob",
        "description": "The blob is completely remove with the records in queue",
        "tags": ["blobs"],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/blobs/{id}/content": {
      "get": {
        "summary": "Retrieve blob content",
        "tags": ["blobs"],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/profiles/{id}": {
      "put": {
        "summary": "Create or update a profile",
        "tags": ["profiles"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Profile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "get": {
        "summary": "Retrieve a profile",
        "tags": ["profiles"],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "httpBasic": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "BlobState": {
        "type": "string",
        "enum": [
          "PENDING_TRANSFORMATION",
          "TRANSFORMATION_IN_PROGRESS",
          "TRANSFORMATION_FAILED",
          "TRANSFORMED",
          "PROCESSED",
          "ABORTED"
        ]
      },
      "RecordImportStatus": {
        "type": "string",
        "enum": [
          "CREATED",
          "UPDATED",
          "INVALID",
          "DUPLICATE",
          "MULTIPLE_MATCHES",
          "ERROR"
        ]
      },
      "RecordImportResult": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/RecordImportStatus"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "metadata": {
            "type": "any"
          }
        }
      },
      "Profile": {
        "type": "object",
        "properties": {
          "auth": {
            "type": "object",
            "properties": {
              "groups": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "transformation": {
            "type": "object",
            "properties": {
              "abortOnInvalidRecords": {
                "type": "boolean"
              },
              "module": {
                "type": "string"
              },
              "parameters": {
                "type": "object"
              }
            },
            "required": ["module"]
          },
          "import": {
            "type": "object",
            "properties": {
              "module": {
                "type": "string"
              },
              "parameters": {
                "type": "object"
              }
            },
            "required": ["module"]
          }
        },
        "required": [
          "auth",
          "transformation",
          "import"
        ]
      },
      "BlobMetadata": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "profile": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/BlobState"
          },
          "creationTime": {
            "type": "string",
            "format": "date"
          },
          "modificationTime": {
            "type": "string",
            "format": "date"
          },
          "processingInfo": {
            "type": "object",
            "properties": {
              "transformationError": {
                "type": "object"
              },
              "numberOfRecords": {
                "type": "number"
              },
              "imported": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RecordImportResult"
                }
              },
              "failed": {
                "type": "array",
                "items": {
                  "type": "any"
                }
              }
            }
          }
        }
      }
    }
  }
}
